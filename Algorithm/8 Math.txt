# 소수 구하기

// 소수 판별시 끝까지 할 필요 없이 루트 n까지만 해보면 된다.
bool isPrime(ll n)
{
	if (n < 2) return false;
	int sqrtN = sqrt(n);
	for (ll i = 2; i <= sqrtN ; i++)
		if (n % i == 0) return false;
	return true;
}

// 에라토스테네스 체
bool arr[N]; // int는 25만이 한계인데 bool은 1byte니까 100만까지 가능

for(int i=0; i<N; i++) {
    arr[i] = true;
}

arr[0] = arr[1] = false;

for(int i=2; i*i<N; i++) {
    if(arr[i]) {
        for(int j=i*2; j<=N; j+=i) {
            arr[j] = false;
        }
    }
}

# 최대 공약수 구하기

// 유클리드 호제법
int Euclidean(int a, int b) {
	int r = a % b;
	if (r == 0)
		return b;
	else
		return Euclidean(b, r);
}

# 최소 공배수 구하기

int lcm(int a, int b) {
    return a * b / Euclidean(a, b);
}








<cmath>

// 실수 타입의 절대값 반환
double abs(double num)
float abs(float num)
long double abs(long double num)

ceil(x) : 정수 올림
round(x) : 정수 반올림
floor(x) : 정수 내림

pow(a,b) : a의 b제곱 (a^b)
sqrt(x) : x의 제곱근(루트)
log(x) : x의 자연로그 값 반환
log2(x) : x의 2 로그 값 반환
log10(x) : x의 상용로그 값 반환

sin(radians) : 라디안 값의 사인값 반환
cos(radians) : 라디안 값의 코사인값 반환
tan(radians) : 라디안 값의 탄젠트값 반환
asin(a) : 입력된 사인값의 라디안값 반환
acos(a) : 입력된 코사인값의 라디안값 반환
atan(a) : 입력된 탄젠트값의 라디안값 반환