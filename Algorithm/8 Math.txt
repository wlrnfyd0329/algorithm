# 소수 구하기

// 소수 판별시 끝까지 할 필요 없이 루트 n까지만 해보면 된다.
// 시간복잡도 : O(√N)
bool isPrime(ll n)
{
	if (n < 2) return false;
	int sqrtN = sqrt(n);
	for (ll i = 2; i <= sqrtN ; i++)
		if (n % i == 0) return false;
	return true;
}

// 에라토스테네스 체
// 시간복잡도 : O(N ln ln N) -> 근데 ln이나 log2나 시간복잡도 개념에서 상수배니까 O(N log log N)으로 표기해도 무방하다
bool arr[N]; // int는 25만이 한계인데 bool은 1byte니까 100만까지 가능

for(int i=0; i<N; i++) {
    arr[i] = true;
}

arr[0] = arr[1] = false;

// i * i를 이용해서 최적화한 코드
for(int i=2; i*i<=N; i++) { // i * i, 이는 합성수라면 2개의 소수로 이루어져있는데, 
						   // 이는 √n보다 큰 값을 가진 합성수는 무조건 √n보다 작은 값을 가지기 때문에 '첫 소인수'가 될 수 없다. 
						   // 이미 더 작은 i에 의해 지워졌을 것이다
						   // N = 5일때, 3의 배수는 지우지 못하고 표기가 안된다고 생각할 수 있지만, 어차피 true로 초기화하고 하기에 지울 필요가 없고 3을 표기할 이유도 없다.
    if(arr[i]) {
        for(int j=i*i; j<=N; j+=i) { // i 미만의 수로 인해 i의 작은 배수들은 이미 지워짐
            arr[j] = false;
        }
    }
}

// 최적화 되지 않은 코드
for (int i = 2; i <= N; i++) {
	if (arr[i]) {
		for (int j = i * 2; j <= N; j += i) {
			isPrime[j] = false;
		}
	}
}

# 최대 공약수 구하기

// 유클리드 호제법
// 시간복잡도 : O(logN)
int Euclidean(int a, int b) {
	int r = a % b;
	if (r == 0)
		return b;
	else
		return Euclidean(b, r);
}

# 최소 공배수 구하기

int lcm(int a, int b) {
    return a * b / Euclidean(a, b);
}








<cmath>

// 실수 타입의 절대값 반환
double abs(double num)
float abs(float num)
long double abs(long double num)

ceil(x) : 정수 올림
round(x) : 정수 반올림
floor(x) : 정수 내림

pow(a,b) : a의 b제곱 (a^b)
sqrt(x) : x의 제곱근(루트)
log(x) : x의 자연로그 값 반환
log2(x) : x의 2 로그 값 반환
log10(x) : x의 상용로그 값 반환

sin(radians) : 라디안 값의 사인값 반환
cos(radians) : 라디안 값의 코사인값 반환
tan(radians) : 라디안 값의 탄젠트값 반환
asin(a) : 입력된 사인값의 라디안값 반환
acos(a) : 입력된 코사인값의 라디안값 반환
atan(a) : 입력된 탄젠트값의 라디안값 반환