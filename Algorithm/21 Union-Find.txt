<Union-Find 구현>

분리 집합이라고도 한다.

구현

vector<int> p(n, -1);

int find(int x) {
    if (p[x] < 0) return x;
    return p[x]; -> 경로 압축 x
    return p[x] = find(p[x]) -> 경로 압축 o
}

bool uni(int u, int v) {
    u = find(u);
    v = find(v);
    if (u == v) return false;
    if (p[u] < p[v]) swap(u, v); -> union by rank
    if (p[u] == p[v]) p[v]--; -> union by rank 이 부분을 p[v] += p[u];로 바꾸면 자식의 개수도 알 수 있다.
    p[u] = v;
    return true;
}

<시간복잡도>
최적화 X : find() -> O(N), uni() -> O(N)
최적화 1 (union by rank) : O(logN)
최적화 2 (경로 압축) : Amortized O(logN)
최적화 1 + 최적화 2 : Amortized O(α(N)) -> N <= 2^2^2^65536-3, α(N) <= 4
