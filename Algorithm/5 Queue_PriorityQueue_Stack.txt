<queue>

FIFO의 자료구조다. 먼저 들어간 것이 먼저 나온다.

우선순위 큐는 heap 자료구조로 이뤄져 있는데
정렬 기준을 사용할 때, 배열과 다르다.
기본적으로는 최대 힙으로 이뤄져 있는데, 이는 배열이 자동으로 정렬되면
오름차순으로 되어 있기에 마지막이 top으로 생각하는 것이 좋다. 그렇다면 set, map, sort 정렬 기준과 반대로 생각해야 한다.

중간에 있는 pq 값을 제거 하고 싶으면 원하는 값이 나올 때까지 뽑고 다시 넣어주면 되는데
pq는 O(logN)이기 때문에 비효율적이다. 따라서 lazy_pq를 만들어놓고 lazy하게 제거할 수 있다.
pq = {5, 3, 2, 2, 1}; lazy_pq = {2, 1};
이라고 할때, 평소처럼 하다가 pq 값을 사용할 때, lazy_pq.top()과 비교하며 같으면 사용하지 않고 pq, lazy_pq 둘다 pop();
하는 방식을 사용할 수 있다.

<stack>

FILO의 자료구조다. 먼저 들어간 것이 나중에 나온다.

명령어는 둘이 같다.

s.empty() // 비어있는지 확인 O(1)
s.size() // 비어있는지 확인 O(1)
s.push() // 삽입 O(1)
s.pop() // 제거 O(1)
s.top() // 맨 위에 있는 인자 반환 O(1)

queue는 동일하지만 top()이 아니라
q.front() 이다. // 맨 앞에 있는 인자 반환 O(1)

복사는 선언할 때, 
queue<int> q1(q2);
queue<int> q;
q = q1;
이렇게 가능하다.
q = queue<int>(); 로 초기화도 가능한다.

pq는 stack과 명령어가 똑같은데 시간 복잡도가 다르다.
pq.empty() // 비어있는지 확인 O(1)
pq.size() // 비어있는지 확인 O(1)
pq.push() // 삽입 O(logN)
pq.pop() // 제거 O(logN)
pq.top() // 맨 위에 있는 인자 반환 O(1)