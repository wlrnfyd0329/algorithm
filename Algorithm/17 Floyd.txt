<플로이드 알고리즘 구현>

const int INF = 0x3f3f3f3f;
int graph[100][100];
int nxt[100][100]; // 해당 간선으로 이동했을 때, 도착한 정점을 의미한다.
a -> b로 가는 간선이라면 nxt[a][b] = b;
fill(graph[0], graph[100], INF);


void floyd() {
    for(int i = 0; i < 100; i++) {
        for(int j = 0; j < 100; j++) {
            if (i == j) graph[i][j] = 0;
        }
    }

    for(int k = 0; k < 100; k++) {
        for(int i = 0; i < 100; i++) {
            for(int j = 0; j < 100; j++) {
                int st = graph[i][k];
                int en = graph[k][j];
                if (graph[i][j] > st + en) {
                    graph[i][j] = st + en;
                    nxt[i][j] = nxt[i][k]; // 경로 복원
                }
            }
        }
    }

    for(int i = 0; i < 100; i++) { // 경로 복원 코드
        for(int j = 0; j < 100; j++) {
            if (graph[i][j] == 0 || d[i][j] == INF) continue;
            vector<int> path;
            int st = i;
            while(st != j) {
                path.push_back(st);
                st = nxt[st][j];
            }
            path.push_back(j);
            for(auto x : path) cout << x << " ";
            cout << endl;
        }
    }
}


<플로이드 알고리즘>

시간복잡도 : O(N^3)

모든 노드를 살펴보는 브루트 포스의 알고리즘이다. 따라서 N이 1000개 이상이라면 사용할 수 없다.
1,000이면 시간 복잡도 계산시 10억이 되기에 1초가 아슬아슬하기 때문이다.
원래 1초에 1억정도 잡지만 플로이드 워셜 알고리즘은 사칙연산뿐이기에 가능하다.