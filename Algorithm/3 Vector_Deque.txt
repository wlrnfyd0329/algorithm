<vector>

- 개념
ArrayList라고도 하며 메모리가 연속되어 있는 자료구조다. 동적할당으로 구성되어 있다.
배열과 list, deque와 다른 점은 메모리가 연속되어 있다는 것이다.

초기화
vector<int> v(n, 0); // n개의 0을 가지는 v
vector<int> v(v2); // v2를 복사한 v를 만듦

v[idx]; // random access O(1)

v.front(); // 첫번째 원소를 참조함 O(1)

v.back(); // 마지막 원소를 참조함 O(1)

v.clear(); // vector 초기화 O(1)

v.push_back(); // 뒤에 원소 넣기 amortized O(1)
// vector는 초기에 메모리를 대략 값의 2배 정도 할당한다. 이 메모리를 다 쓰면
// 다시 메모리를 재할당 해주는데 이때 O(N)이 걸린다. 하지만 평소에는 O(1)인데
// 평균적으로 O(1)이 걸리게 된다.

v.pop_back(); // 뒤에 원소 빼기 O(1)

v.size(); // 벡터 크기 반환 O(1)

v.insert(2, 3, [4]); // 2번 idx에 3번을 4번 삽입 O(N)

v.earse(iter); // iter 위치에 있는 원소 제거 O(N)

v.empty(); // 비어있는지 확인 O(1)

v.begin() // 벡터의 첫번째 원소를 가리킨다. iter 반환

v.end() // 벡터의 마지막 원소 다음을 가리킨다. iter 반환

v.rbegin() // 벡터의 마지막 원소를 가리킨다. iter 반환

v.rend() // 벡터의 첫번째 원소 전을 가리킨다. iter 반환

순회
for(int i = 0; i < n; i++) {
    cout << v[i] << endl;
}

for(int i : v) {
    cout << i << endl;
}

for(auto iter = v.begin(); iter != v.end(); iter++) {
    cout << *iter << endl;
}

------------------------------------------------------------------------------

<deque>

vector의 모든 메소드 같지만 아래 두가지만 다르다

dq.push_front(); // 앞에 원소 넣기 O(1)

dq.pop_front();  // 앞에 원소 빼기 O(1)

