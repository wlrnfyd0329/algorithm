bit 연산

bit AND

0 & 0 => 0
0 & 1 => 0
1 & 0 => 0
1 & 1 => 1

1101 & 0111 = 0101

bit OR

0 | 0 => 0
0 | 1 => 1
1 | 0 => 1
1 | 1 => 1

0110 | 1100 = 1110

bit XOR

0 ^ 0 => 0
0 ^ 1 => 1
1 ^ 0 => 1
1 ^ 1 => 0

0101 ^ 0100 = 0001

bit NOT

~1 => 0
~0 => 1

~1001 = 0110 // 이때 비트 전부 반전되기 때문에 보수의 개념을 명심해야 한다

bit SHIFT

1 >> k => 1을 k번 오른쪽으로 옮김 => 2 를 k번 나누는 것을 의미함

16 (0b10000) >> 1 = 0b01000 = 8

1 << k => 1을 k번 왼쪽으로 옮김 => 2 를 k번 곱하는 것을 의미함
컴퓨터가 2진수이기 때문에 비트 하나당 2의 제곱을 의미한다.

1 (0b00001) >> 4 = 0b10000 = 16

-------------------------------------------------------------------------------------------

<bitset>
정적인 사이즈를 갖고, 복잡한 비트 연산이 필요한 경우 사용하는 헤더다.

bitset<10> bit; // 0000000000 10개의 비트로 0 생성
bitset<10> bit("1111111111"); // 문자열 "1111111111"으로 초기화
bitset<10> bit(64) // 10진수 64를 10bit(0001000000)로 변환

bitset<10> bit = 16; // 0000010000
bitset<10> bit = "0000010000" // 0000010000

bitset에서 []을 이용하여 접근할 수 있는데, 기존 배열과 문자열과 다르게 맨 뒤를 0부터 시작하여 역순으로 접근한다
bit[2] = 0;
bit.reset(2) // 뒤에서 index 2를 0으로 변경 1111 => 1011
bit.reset() // 인수 생략시, 전체 0

bit[2] = 1;
bit.set(2); // 1로 변경 0000 => 0100
bit.set() // 인수 생략시, 전체 1

to_ulong(): bit 배열을 10진수 ulong 자료형의 값으로 변환
to_ullong(): bit 배열을 10진수 ullong 자료형의 값으로 변환
to_string(): bit 배열을 string 자료형의 값으로 변환

all: 모든 bit가 1이면 true, 아니면 false
any: 한 bit라도 1이면 true, 아니면 false
none: 모든 bit가 0이면 true, 아니면 false

count(): bitset 중 1의 개수
size(): bitset의 길이