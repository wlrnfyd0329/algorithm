<다이나믹 세그먼트 트리 구현>

typedef long long ll;

struct Node {
    Node *left, *right;
    ll value;
    Node() {
        left = right = nullptr;
        value = 0;
    }
} *root = new Node();

ll init(Node *node, int start, int end) {
    if (start == end) {
        return node->value = arr[start];
    }
    int mid = (start + end) >> 1;
    if (!node->left) node->left = new Node();
    if (!node->right) node->right = new Node();
    return node->value = init(node->left, start, mid) + init(node->right, mid + 1, end);
}

void update(Node *node, int start, int end, int index, int value) {
    if (start == end) {
        node->value = value;
        return;
    }
    int mid = (start + end) >> 1;
    if (index <= mid) {
        if (!node->left) node->left = new Node();
        update(node->left, start, mid, index, value);
    }
    else {
        if (!node->right) node->right = new Node();
        update(node->right, mid + 1, end, index, value);
    }
    ll tmp1 = node->left ? node->left->value : 0;
    ll tmp2 = node->right ? node->right->value : 0;
    node->value = tmp1 + tmp2;
}

ll query(Node *node, int start, int end, int left, int right) {
    if (!node) return 0;
    if (right < start || end < left) return 0;
    if (left <= start && end <= right) return node->value;
    int mid = (start + end) >> 1;
    return query(node->left, start, mid, left, right) + query(node->right, mid + 1, end, left, right);
}

<lazy 다이나믹 세그먼트 트리 구현>

typedef long long ll;

struct Node {
    Node *left, *right;
    ll lazy;
    ll value;
    Node() {
        left = right = nullptr;
        value = lazy = 0;
    }
} *root = new Node();

void lazy_update(Node *node, int start, int end) {
    if (!node) return;
    if (node->lazy != 0) {
        node->value += (end - start + 1) * node->lazy;
        if (start != end) {
            if (!node->left) node->left = new Node();
            node->left->lazy += node->lazy;
            if (!node->right) node->right = new Node();
            node->right->lazy += node->lazy;
        }
        node->lazy = 0;
    }
}

void update(Node *node, int start, int end, int left, int right, int value) {
    lazy_update(node, start, end);
    if (!node || right < start || end < left) return;
    if (left <= start && right <= end) {
        node->lazy += value;
        lazy_update(node, start, end);
        return;
    }
    int mid = (start + end) >> 1;
    if (!node->left) node->left = new Node();
    update(node->left, start, mid, index, value);
    if (!node->right) node->right = new Node();
    update(node->right, mid + 1, end, index, value);
    node->value = node->left->value + node->right->value;
}

ll query(Node *node, int start, int end, int left, int right) {
    lazy_update(node, start, end);
    if (!node) return 0;
    if (right < start || end < left) return 0;
    if (left <= start && end <= right) return node->value;
    int mid = (start + end) >> 1;
    return query(node->left, start, mid, left, right) + query(node->right, mid + 1, end, left, right);
}

<다이나믹 세그먼트 트리>

다이나믹 세그먼트 트리는 업데이트 할때, node가 생기기 때문에 node가 없다면 만들어주는 것을 update에 필수로 넣어야 한다.
query 할때는 node가 없다면 갈 필요가 없기 때문에 !node로 가지치기를 해줘야 한다.

update와 query를 진행할 때, 
index 처럼 단일을 변경하거나 조회할 때,
if (start == end) 로 하고 index가 mid 값과 비교하면서 내려가도 되고
if (start == end) 위에 index 가 범위를 벗어나면 return 해주는 방법을 사용해도 된다.

left, right 처럼 범위를 변경하거나 조회할 때는 두가지로 나뉘는데,
중요한 것은 범위를 검사해야 한다는 것이고 범위 변경은 lazy propagation을 사용하는 것이 좋다.
