<세그먼트 트리 구현>

int n = 길이;
vector<int> tree;
vector<int> arr;

int init(int node, int start, int end) {
    if (start == end) {
        return tree[node] = arr[start];
    }
    int mid = (start + end) >> 1;
    return tree[node] = init(node * 2, start, mid) + init(node * 2 + 1, mid + 1, end);
}

int query(int node, int start, int end, int left, int right) {
    if (right < start || end < left) return 0;
    if (left <= start && end <= right) return tree[node];
    int mid = (start + end) >> 1;
    return query(node * 2, start, mid, left, right) + query(node * 2 + 1, mid + 1, end, left, right);
}

void update(int node, int start, int end, int index, int value) {
    if (index < start || end < index) return;
    if (start == end) {
        tree[node] = value;
        return;
    }
    int mid = (start + end) >> 1;
    update(node * 2, start, mid, index, value);
    update(node * 2 + 1, mid + 1, end, index, value);
    tree[node] = tree[node * 2] + tree[node * 2 + 1];
}

int main() {
    arr = vector<int> (n + 1);
    int h = ceil(log2(n));
    tree = vector<int> (1 << (h + 1));

    init(1, 1, N);
}


<lazy 세그먼트 트리 구현>

int n = 길이;
vector<int> tree;
vector<int> lazy;
vector<int> arr;

int init(int node, int start, int end) {
    if (start == end) {
        return tree[node] = arr[start];
    }
    int mid = (start + end) >> 1;
    return tree[node] = init(node * 2, start, mid) + init(node * 2 + 1, mid + 1, end);
}

void lazy_update(int node, int start, int end) {
    if (lazy[node] != 0) {
        tree[node] += lazy[node] * (end - start + 1);
        if (start != end) {
            lazy[node * 2] += lazy[node];
            lazy[node * 2 + 1] += lazy[node];
        }
        lazy[node] = 0;
    }
}

int query(int node, int start, int end, int left, int right) {
    lazy_update(node, start, end);
    if (right < start || end < left) return 0;
    if (left <= start && end <= right) return tree[node];
    int mid = (start + end) >> 1;
    return query(node * 2, start, mid, left, right) + query(node * 2 + 1, mid + 1, end, left, right);
}

void update(int node, int start, int end, int left, int right, int value) {
    lazy_update(node, start, end);
    if (right < start || end < left) return;
    if (left <= start && end <= right) {
        lazy[node] += value;
        lazy_update(node, start, end);
        return;
    }
    int mid = (start + end) >> 1;
    update(node * 2, start, mid, left, right, value);
    update(node * 2 + 1, mid + 1, end, left, right, value);
    tree[node] = tree[node * 2] + tree[node * 2 + 1];
}

int main() {
    arr = vector<int> (n + 1);
    int h = ceil(log2(n));
    tree = vector<int> (1 << (h + 1));
    lazy = vector<int> (1 << (h + 1));

    init(1, 1, N);
}

<세그먼트 트리>

이 자료구조의 핵심은 구간합을 빠르게 구할 수 있는데, 수정도 빠르게 된다는 점이다.
배열로 구간합을 저장한다면 하나의 값을 수정했을 때, O(N)의 시간복잡도가 드는데
세그먼트 트리를 이용한다면 O(logN)에 구간합을 수정할 수 있다.

