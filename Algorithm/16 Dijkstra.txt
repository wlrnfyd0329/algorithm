<다익스트라 알고리즘 구현>

const int INF = 0x3f3f3f3f;
vector<vector<pair<int, int>> graph; // [출발 노드] = {가중치, 도착 노드};
int dist[노드 수];
fill(dist, dist + 노드 수, INF);
int pre[노드 수];
priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

dist[st] = 0;
pq.push(dist[st], st);

while(!pq.empty()) {
    auto cur = pq.top(); pq.pop();

    if (dist[cur.second] != cur.first) continue;
    for(auto nxt : graph[cur.second]) {
        if (dist[nxt.second] <= nxt.first + dist[cur.second]) continue;
        dist[nxt.second] = nxt.first + dist[cur.second];
        pre[nxt.second] = cur.second; // 경로 복원
        pq.push({dist[nxt.second], nxt.second});
    }
}

cout << dist[en] << endl;
vector<int> path;
int cur = en;
while(cur != st) {
    path.push_back(cur);
    cur = pre[cur];
}
path.push_back(cur);
reverse(path.begin(), path.end());
for(auto x : path) cout << x << " ";

<다익스트라 알고리즘>
 
 시간 복잡도 : O(ElogV) = O(ElogE)
 노드 V, 간선 E

 모든 가중치가 양수여야 하고 그리디한 성질을 가지고 있다.
 음수 가중치가 있다면 벨만-포드 알고리즘을 사용해야 한다.

 모든 노드까지의 최단거리를 구할 수 있고 방향이 있는 그래프일 때, 방향을 반대로 하고 다익스트라를 하면
 자신까지 오는 최단 거리를 구할 수 있다.