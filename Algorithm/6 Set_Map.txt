명령어

set<int> s; // 기본 선언
set<int> s(정렬 기준); 
// 아래와 같이 정렬 기준을 정의해준다. 
struct cmp {
    bool operator() (const int& a, const int& b) const {
        retrun a > b; // 내림차순
    }
}

또는 구조체를 원소로 사용하게 되면 구조체 자체에서 대소비교를 정의할 수 있다.
struct Node {
    bool operator<(const Node &other) const {
        return v < other.v; // 오름차순
    }
}

// 정의시 등호가 헷갈릴 수 있는데, 배열을 생각하고 > 하면 점점 작아지니까 내림차순
// < 하면 큰 것이 오른쪽으로 가니까 오름차순이라고 생각하면 쉽다.

set<int> s2(s1); // s1를 복사한 s2를 만든다.

s.begin(); // 첫번째 원소 iter 반환 O(1)

s.end(); // 마지막 원소 뒤에 iter 반환 O(1)

s.rbegin();// 마지막 원소 iter 반환 O(1)

s.rend(); // 첫번째 원소 앞에 iter 반환 O(1)

s.clear(); // 비우기 O(1)

s.count(k); // k값이 몇개 있는지 확인 O(logN)

s.empty() // 비어 있는지 확인 O(1)

s.insert(k); // O(logN) pq와 빅-오는 같지만 상수 값은 set 훨씬 큼
// pair<iterator, bool>을 반환한다. 같은 값이 있다면 false가 반환됨.

s.erase(iter); // O(logN)
s.earse(start, end); // [start, end) 범위의 원소를 모두 제거함

s.find(k); // k값 찾기, 없으면 s.end() 반환 O(logN)

s.upper_bound(k); // k보다 큰 값 중에 가장 작은 iter 반환 O(logN)

s.lower_bound(k); // k보다 같거나 큰 값 중에 가장 작은 iter 반환 O(logN)

s.size(); // O(1)

순회 O(N)
랜덤 엑세스가 불가능하다.

for(auto k : s) {
    cout << k << endl;
}

for(auto iter = s.begin(); iter != s.end(); iter++) {
    cout << *iter << endl;
}

------------------------------------------------------------------------------

<set>

red-black 트리로 중복이 허용되지 않고 원소는 자동으로 오름차순 정렬된다.

<multiset>

중복이 허용되며 원소는 자동으로 오름차순 정렬된다.
upper_bound, lower_bound가 더 유용하게 사용된다.

<unordered_set>

red-black 트리로 중복이 허용되지 않고 원소는 자동으로 정렬되지 않는다.

<map>

key를 기준으로 이루어진 균형 이진 트리 구조다.(red-black 트리) 
pair 형태로 저장되고 key는 중복이 안된다. 또한 자동으로 정렬된다.
map의 포인트는 insert할 때, pair 형태로 해줘야 한다.
map<int, int> m;
m.insert({1, 3});
m.insert(pair<int, int> (1, 3));
pair<iterator, bool>를 반환하고 중복된 key 값이 있다면 false를 반환하며 실패한다.
하지만 map은 set과 다르게 []로 insert 할 수 있는데
m[1] = 3; 하면 중복된 값이 있더라도 값이 들어가며 업데이트 된다.
그래서 없는 원소를 m[5]로 조회하게 되면 바로 m[5] = 0이 자동으로 생긴다.
주의해야 한다.

<multimap>

map과 같지만 key값이 중복이 허용된다는 것만 다르다.

<unordered_map>

red-black 트리로 중복이 허용되지 않고 원소는 자동으로 정렬되지 않는다.
이때, 보통 해싱으로 이뤄져 있기 때문에 O(1)의 시간이 걸리는데, 해시 충돌이 난다면 O(N)의 시간이 걸린다.

해싱 - 라빈카프
해시함수를 작성해서 진행하면 하나의 값이 하나의 해시 값을 갖는 것이 일반적인데,
값이 달라고 해시값이 같은 해시 충돌이 일어날 수 있다. 하지만
라빈카프 알고리즘은 각 값마다 해시함수를 여러개 만들어서 여러개의 해시값이 같다면
같다고 처리하고 넘어가는 것이다. 확률적으로 정답이 틀릴 수 있다.

